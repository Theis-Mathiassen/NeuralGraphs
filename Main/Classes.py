#Imports
import torch
from torch.nn import Linear
import torch.nn.functional as F
from torch_geometric.nn import GCNConv
from torch_geometric.nn import global_mean_pool

#Model definition
class GCN(torch.nn.Module):
    def __init__(self, in_features=7, hidden_channels=64, outfeatures = 2):
        super(GCN, self).__init__()

        # Input layer
        self.conv1 = GCNConv(in_features, hidden_channels)

        # Hidden layers
        self.conv2 = GCNConv(hidden_channels, hidden_channels)
        self.conv3 = GCNConv(hidden_channels, hidden_channels)
        self.conv4 = GCNConv(hidden_channels, hidden_channels)
        self.conv5 = GCNConv(hidden_channels, hidden_channels)

        # Output layer
        self.lin = Linear(hidden_channels, outfeatures)

    def forward(self, x, edge_index, batch):
        # 1. Obtain node embeddings
        x = self.conv1(x, edge_index)
        x = x.relu()
        x = self.conv2(x, edge_index)
        x = x.relu()
        x = self.conv3(x, edge_index)
        x = x.relu()
        x = self.conv4(x, edge_index)
        x = x.relu()
        x = self.conv5(x, edge_index)

        # 2. Readout layer
        x = global_mean_pool(x, batch)  # [batch_size, hidden_channels]

        # 3. Apply a final classifier
        x = F.dropout(x, p=0.5, training=self.training)
        x = self.lin(x)

        return x


class BaseModel():
    def __init__(self, model: GCN, loss, optim):
        self.model = model
        self.loss_function = loss
        self.optimizer = optim


# The data generated by training the model over 1 epoch
class TrainData():
    def __init__(self):
        self.train_losses = 0
        self.train_accuracies = 0
        self.train_labels = []
        self.train_scores = []
        
# The data generated by Testing the model once
class TestData():
    def __init__(self):
        self.test_losses = 0 
        self.test_accuracies = 0
        self.test_scores = []
        self.test_labels = []

# All data from a given set of hyperparameters.
# Data passed to plotting functions
class AllData():
    def __init__(self):
        self.train_accuracies = []
        self.train_losses = []
        self.train_labels = []
        self.train_scores = []
        self.test_losses = []
        self.test_accuracies = []
        self.test_scores = []
        self.test_labels = []
    def insert_train_data (self, data: TrainData):
        self.train_accuracies.append(data.train_accuracies)
        self.train_losses.append(data.train_losses)
        self.train_labels.extend(data.train_labels)
        self.train_scores.extend(data.train_scores)
    def insert_test_data (self, data: TestData):
        self.train_accuracies.append(data.test_accuracies)
        self.train_losses.append(data.test_losses)
        self.train_labels.extend(data.test_labels)
        self.train_scores.extend(data.test_scores)
